#!/bin/bash

# shellcheck disable=SC1091,SC2086,SC2181

declare -i plugin=0
declare -i status=0
declare -l arch=""

# cockpit
declare cockpitPackages=""

# docker
declare dockerPackages=""
declare dockerStorage=""
declare -i download=0
daemonJson="/etc/docker/daemon.json"
dockerBin="/usr/bin/docker"
dockerCompose="/usr/local/bin/docker-compose"
dockerComposeVersion="1.28.4"
dockerComposeBuild="ls31"
dockerComposeUrl="https://github.com/docker/compose/releases/download/${dockerComposeVersion}/docker-compose-Linux-x86_64"
dockerComposeUrlLs="https://github.com/linuxserver/docker-docker-compose/releases/download/${dockerComposeVersion}-${dockerComposeBuild}/docker-compose-"
dockerOverrideDir="/etc/systemd/system/docker.service.d"
dockerOverrideFile="${dockerOverrideDir}/waitAllMounts.conf"
omvextrasList="/etc/apt/sources.list.d/omvextras.list"

# portainer
declare -i agentport=8000
declare -i webport=9000
portainerImage="portainer/portainer-ce"
portainerImageOld="portainer/portainer"
portainerName="portainer"
portainerVolume="portainer_data"

# yacht
declare -i yachtport=8001
yachtImage="selfhostedpro/yacht"
yachtName="yacht"
yachtVolume="yacht"

setArch()
{
  arch="$(dpkg --print-architecture)"
}

checkDNS()
{
  getent="/usr/bin/getent"
  if [ -f "${getent}" ]; then
    if ! ${getent} hosts hub.docker.com > /dev/null; then
      echo "DNS error.  Exiting ..."
      exit 0
    else
      echo "DNS OK."
    fi
  fi
}

setCockpitPackages()
{
  cockpitPackages="cockpit cockpit-packagekit"
  if [[ "${arch}" == "amd64" ]] || [[ "${arch}" == "i386" ]]; then
    cockpitPackages="${cockpitPackages} cockpit-machines virtinst qemu-system-x86 qemu-utils libvirt-dbus cockpit-storaged dnsmasq-base"
  fi
}

setDockerPackages()
{
  if [[ "${arch}" == "i386" ]] || ! grep -q 'download.docker.com' ${omvextrasList}; then
    # there is no i386 docker-ce package in the docker repos
    # if docker repos are disabled, use debian repos as well
    # use docker.io from Debian repo
    dockerPackages="docker.io docker-compose ${dockerPackages}"
  else
    dockerPackages="docker-ce ${dockerPackages}"
  fi
}

setExports()
{
  export DEBIAN_FRONTEND=noninteractive
  export APT_LISTCHANGES_FRONTEND=none
  export LANG=C.UTF-8
}

setConfig()
{
  # if openmediavault is installed, get docker storage path
  if [ -f "/usr/share/openmediavault/scripts/helper-functions" ]; then
    # source openmediavault functions
    . /etc/default/openmediavault
    . /usr/share/openmediavault/scripts/helper-functions

    xpath="/config/system/omvextras"
    dockerStorage=$(omv_config_get "${xpath}/dockerStorage")
    echo "Docker storage :: ${dockerStorage}"
    agentport=$(omv_config_get "${xpath}/agentport")
    echo "Agent port:: ${agentport}"
    webport=$(omv_config_get "${xpath}/webport")
    echo "Web port:: ${webport}"
    yachtport=$(omv_config_get "${xpath}/yachtport")
    echo "Yacht port:: ${yachtport}"
  fi
}

updateRepos()
{
  # update repo lists
  if ! apt-get update; then
    echo "Failed to update apt repos."
    exit 10
  fi
}

removeCockpit()
{
  setCockpitPackages
  setExports

  if dpkg --list | grep --quiet openmediavault-kvm; then
    plugin=1
  fi

  # remove cockpit packages
  status=0
  for pkg in ${cockpitPackages}; do
    if [ ${plugin} -eq 1 ]; then
      if [[ ! "${pkg}" == cockpit* ]]; then
        echo "Skipping ${pkg} because openmediavault-kvm plugin is installed."
        continue
      fi
    fi
    if dpkg --list | grep --quiet "${pkg}"; then
      status=1
      if apt-get --yes --auto-remove purge ${pkg}; then
        echo "Successfully removed '${pkg}' package."
      else
        echo "Failed to remove '${pkg}' package."
        exit 1
      fi
    fi
  done
  if [ ${status} -ne 1 ]; then
    echo "No cockpit packages to remove."
  fi
}

removeDocker()
{
  setExports
  setDockerPackages

  if [ -f "${dockerOverrideFile}" ]; then
    rm -f "${dockerOverrideFile}"
    systemctl daemon-reload
  fi

  # remove docker
  status=0
  for pkg in ${dockerPackages}; do
    if dpkg --list | grep --quiet "${pkg}"; then
      status=1
      if apt-get --yes --auto-remove purge ${pkg}; then
        echo "Successfully removed '${pkg}' package."
      else
        echo "Failed to remove '${pkg}' package."
        exit 2
      fi
    fi
  done
  if [ ${status} -ne 1 ]; then
    echo "No docker packages to remove."
  fi
  if [ -f "${dockerCompose}" ]; then
    rm "${dockerCompose}"
    echo "local docker-compose removed."
  fi
}

removePortainer()
{
  status=0

  if [ ! -f "${dockerBin}" ]; then
    echo "Docker is not installed."
    exit 0
  fi

  # stop existing portainer container
  for cn in $(docker container ls --format "{{.Names}},{{.Image}}" | grep --ignore-case "${portainerName}"); do
    echo "Stopping ${cn%%,*} ..."
    docker container stop "${cn%%,*}"
    status=1
  done

  # remove existing portainer container
  for cn in $(docker container ls --all --format "{{.Names}},{{.Image}}" | grep --ignore-case "${portainerName}"); do
    echo "Removing ${cn%%,*} ..."
    docker container rm "${cn%%,*}"
    status=1
  done

  # remove existing portainer or portainer-ce images
  for img in ${portainerImage} ${portainerImageOld}; do
    if docker image ls --all | grep --quiet "${img}"; then
      echo "Removing ${img} image ..."
      docker image rm "${img}"
      status=1
    fi
  done

  if [ ${status} -ne 1 ]; then
    echo "No portainer containers or images to remove."
  fi
}

removeYacht()
{
  status=0

  if [ ! -f "${dockerBin}" ]; then
    echo "Docker is not installed."
    exit 0
  fi

  # stop existing yacht container
  for cn in $(docker container ls --format "{{.Names}},{{.Image}}" | grep --ignore-case "${yachtName}"); do
    echo "Stopping ${cn%%,*} ..."
    docker container stop "${cn%%,*}"
    status=1
  done

  # remove existing yacht container
  for cn in $(docker container ls --all --format "{{.Names}},{{.Image}}" | grep --ignore-case "${yachtName}"); do
    echo "Removing ${cn%%,*} ..."
    docker container rm "${cn%%,*}"
    status=1
  done

  # remove existing yacht image
  if docker image ls --all | grep --quiet "${yachtImage}"; then
    echo "Removing ${yachtImage} image ..."
    docker image rm "${yachtImage}"
    status=1
  fi

  if [ ${status} -ne 1 ]; then
    echo "No yacht containers or images to remove."
  fi
}

installCockpit()
{
  setCockpitPackages
  setExports

  # check to see if already installed
  status=0
  for pkg in ${cockpitPackages}; do
    if ! dpkg --list | grep --quiet "${pkg}"; then
      status=1
    fi
  done

  # install cockpit packages
  if [ ${status} -eq 1 ]; then
    updateRepos

    if apt-get --yes install ${cockpitPackages}; then
      echo "Successfully installed cockpit."
    else
      echo "Failed to install cockpit."
      exit 4
    fi
  else
    echo "cockpit already installed."
  fi
}

configDocker()
{
  setExports

  # if path specified, write config file
  if [ -n "${dockerStorage}" ]; then
    daemonJsonTemp="$(mktemp)"
    cat <<EOF > ${daemonJsonTemp}
{
  "data-root": "${dockerStorage}"
}
EOF

    if ! diff --brief "${daemonJsonTemp}" "${daemonJson}"; then
      echo "Docker storage path has changed."
      cp "${daemonJsonTemp}" "${daemonJson}"
      status=1
    fi
    rm -f "${daemonJsonTemp}"
  fi


  # enable and restart docker service
  if [ ${status} -eq 1 ]; then
    systemctl enable docker.service
    systemctl restart docker.service
  else
    echo "Skipping docker restart."
  fi
}

configOverride()
{
  # create override to wait for local filesystems
  if [ -d "${dockerOverrideDir}" ]; then
    echo "Create override directory ..."
    mkdir -p "${dockerOverrideDir}"
  fi

  echo "Create override file ..."
  cat <<EOF > ${dockerOverrideFile}
[Unit]
After=local-fs.target $(systemctl list-units --type=mount | grep /srv | awk '{ print $1 }' | tr '\n' ' ')
EOF
  echo "Reload systemd daemon ..."
  systemctl daemon-reload
}

installDocker()
{
  local url=""

  setExports
  setDockerPackages
  configOverride

  # check to see if already installed to avoid restarting service
  for pkg in ${dockerPackages}; do
    if ! dpkg --list | grep --quiet "${pkg}"; then
      status=1
    fi
  done

  # install docker-ce package
  if [ ${status} -eq 1 ]; then
    updateRepos

    if apt-get --yes install ${dockerPackages}; then
      echo "Successfully installed docker."
    else
      echo "Failed to install docker."
      echo "Try fixing install..."
      if apt-get --fix-broken --yes install; then
        echo "Successfully fixed docker install."
      else
        echo "Unable to fix docker install."
        exit 5
      fi
    fi
  fi

  # Write daemon.json file
  configDocker

  if [[ "${arch}" == "amd64" ]] || [[ "${arch}" == "armhf" ]] || [[ "${arch}" == "arm64" ]]; then
    # download docker-compose and place in /usr/local/bin/ if current version is older
    if [ -f "${dockerCompose}" ]; then
      curVers="$(${dockerCompose} --version | cut -d',' -f1 | awk '{ print $3 }')"
      if [ ! "${curVers}" = "${dockerComposeVersion}" ]; then
        download=1
      fi
    else
      download=1
    fi
    if [ ${download} -eq 1 ]; then
      echo "Installing local docker-compose ${dockerComposeVersion}..."
      case ${arch} in
        amd64)
          url="${dockerComposeUrl}"
          ;;
        arm*)
          url="${dockerComposeUrlLs}${arch}"
          ;;
      esac
      wget --tries=3 --output-document="${dockerCompose}" "${url}"
      chmod +x "${dockerCompose}"
    fi
  fi
}

installPortainer()
{
  if [ ! -f "${dockerBin}" ]; then
    installDocker
  fi

  # remove existing
  removePortainer

  # create portainer data volume
  if ! docker volume ls | grep --quiet "${portainerVolume}"; then
    echo "Creating portainer volume ..."
    docker volume create "${portainerVolume}"
  fi

  # pull and start portainer
  echo "Pulling and starting ${portainerImage} ..."
  docker run -d --name "${portainerName}" -p ${webport}:9000 -p ${agentport}:8000 --restart=unless-stopped -v /var/run/docker.sock:/var/run/docker.sock -v ${portainerVolume}:/data ${portainerImage}
  if [ $? -gt 0 ]; then
    echo "Something went wrong trying to pull and start portainer ..."
  fi
}

installYacht()
{
  if [ ! -f "${dockerBin}" ]; then
    installDocker
  fi

  # remove existing
  removeYacht

  # create yacht data volume
  if ! docker volume ls | grep --quiet "${yachtVolume}"; then
    echo "Creating yacht volume ..."
    docker volume create "${yachtVolume}"
  fi

  # pull and start yacht
  echo "Pulling and starting ${yachtImage} ..."
  docker run -d --name "${yachtName}" -p ${yachtport}:8000 --restart=unless-stopped -v /var/run/docker.sock:/var/run/docker.sock -v ${yachtVolume}:/config ${yachtImage}
  if [ $? -gt 0 ]; then
    echo "Something went wrong trying to pull and start yacht ..."
  fi
}

setArch
setConfig

option="${1}"
state="${2}"

echo "arch   :: ${arch}"
echo "option :: ${option}"
echo "state  :: ${state}"
echo "extras :: $(dpkg-query -W -f='${Version}' openmediavault-omvextrasorg)"

if [[ "${state}" == "install" ]]; then
  checkDNS
fi

case ${option} in
  cockpit)
    if [[ "${state}" == "remove" ]]; then
      removeCockpit
    else
      installCockpit
    fi
    ;;
  portainer)
    if [[ "${arch}" == "i386" ]]; then
      echo "portainer is not compatible with i386 systems."
      exit 0
    fi
    if [[ "${state}" == "remove" ]]; then
      removePortainer
    else
      installPortainer
    fi
    ;;
  yacht)
    if [[ "${state}" == "remove" ]]; then
      removeYacht
    else
      installYacht
    fi
    ;;
  *)
    if [[ "${state}" == "remove" ]]; then
      removeDocker
    elif [[ "${state}" == "config" ]]; then
      configDocker
    else
      installDocker
    fi
    ;;
esac

exit 0
