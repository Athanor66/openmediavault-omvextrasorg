#!/bin/bash

# shellcheck disable=SC1091,SC2086

declare -i status=0

# cockpit
declare cockpitPackages=""

# docker
declare dockerPackages="docker-ce docker-compose"
declare -i download=0
daemonJson="/etc/docker/daemon.json"
dockerBin="/usr/bin/docker"
dockerCompose="/usr/local/bin/docker-compose"
dockerComposeVersion="1.24.1"
dockerComposeUrl="https://github.com/docker/compose/releases/download/${dockerComposeVersion}/docker-compose-Linux-x86_64"

# portainer
portainerImage="portainer/portainer"
portainerName="Portainer"
portainerVolume="portainer_data"


setCockpitPackages()
{
  cockpitPackages="cockpit cockpit-docker cockpit-packagekit"
  if [[ "$(dpkg --print-architecture)" == "amd64" ]] || [[ "$(dpkg --print-architecture)" == "i386" ]]; then
    cockpitPackages="${cockpitPackages} cockpit-machines virtinst qemu-kvm qemu-utils libvirt-dbus cockpit-storaged"
  fi
}

setExports()
{
  export DEBIAN_FRONTEND=noninteractive
  export APT_LISTCHANGES_FRONTEND=none
  export LANG=C.UTF-8
}

updateRepos()
{
  # update repo lists
  if ! apt-get update; then
    echo "Failed to update apt repos."
    exit 10
  fi
}

removeCockpit()
{
  setCockpitPackages
  setExports

  # remove cockpit packages
  status=0
  for pkg in ${cockpitPackages}; do
    if dpkg --list | grep --quiet "${pkg}"; then
      status=1
      if apt-get --yes --auto-remove purge ${pkg}; then
        echo "Successfully removed '${pkg}' package."
      else
        echo "Failed to remove '${pkg}' package."
        exit 1
      fi
    fi
  done
  if [ ${status} -ne 1 ]; then
    echo "No cockpit packages to remove."
  fi
}

removeDocker()
{
  setExports

  # remove docker
  status=0
  for pkg in ${dockerPackages}; do
    if dpkg --list | grep --quiet "${pkg}"; then
      status=1
      if apt-get --yes --auto-remove purge ${pkg}; then
        echo "Successfully removed '${pkg}' package."
      else
        echo "Failed to remove '${pkg}' package."
        exit 2
      fi
    fi
  done
  if [ ${status} -ne 1 ]; then
    echo "No docker packages to remove."
  fi
  if [ -f "${dockerCompose}" ]; then
    rm "${dockerCompose}"
    echo "local docker-compose removed."
  fi
}

removePortainer()
{
  status=0
  if [ ! -f "${dockerBin}" ]; then
    echo "Docker is not installed."
    exit 3
  fi

  # stop existing Portainer container
  if docker container ls | grep --quiet "${portainerName}"; then
    docker container stop "${portainerName}"
    status=1
  fi

  # remove existing Portainer container
  if docker container ls --all | grep --quiet "${portainerName}"; then
    docker container rm "${portainerName}"
    status=1
  fi

  # remove existing Portainer image
  if docker image ls --all | grep --quiet "${portainerImage}"; then
    docker image rm "${portainerImage}"
    status=1
  fi

  if [ ${status} -ne 1 ]; then
    echo "No portainer containers or images to remove."
  fi
}

installCockpit()
{
  setCockpitPackages
  setExports

  # check to see if already installed
  status=0
  for pkg in ${cockpitPackages}; do
    if ! dpkg --list | grep --quiet "${pkg}"; then
      status=1
    fi
  done

  # install cockpit packages
  if [ ${status} -eq 1 ]; then
    updateRepos

    if apt-get --yes install ${cockpitPackages}; then
      echo "Successfully installed cockpit."
    else
      echo "Failed to install cockpit."
      exit 4
    fi
  else
    echo "cockpit already installed."
  fi
}

installDocker()
{
  setExports

  # if openmediavault is installed, get docker storage path
  if [ -f "/usr/share/openmediavault/scripts/helper-functions" ]; then
    # source openmediavault functions
    . /etc/default/openmediavault
    . /usr/share/openmediavault/scripts/helper-functions

    xpath="/config/system/omvextras"
    dockerStorage=$(omv_config_get "${xpath}/dockerStorage")
    echo "Docker storage :: ${dockerStorage}"
  fi

  # check to see if already installed to avoid restarting service
  status=0
  for pkg in ${dockerPackages}; do
    if ! dpkg --list | grep --quiet "${pkg}"; then
      status=1
    fi
  done

  # install docker-ce package
  if [ ${status} -eq 1 ]; then
    updateRepos

    if apt-get --yes install ${dockerPackages}; then
      echo "Successfully installed docker."
    else
      echo "Failed to install docker."
      echo "Try fixing install..."
      if apt-get --fix-broken --yes install; then
        echo "Successfully fixed docker install."
      else
        echo "Unable to fix docker install."
        exit 5
      fi
    fi
  fi

  # if path specified, write config file
  if [ -n "${dockerStorage}" ]; then
    daemonJsonTemp="$(mktemp)"
    cat <<EOF > ${daemonJsonTemp}
{
  "data-root": "${dockerStorage}"
}
EOF

    if ! diff --brief "${daemonJsonTemp}" "${daemonJson}"; then
      echo "Docker storage path has changed."
      cp "${daemonJsonTemp}" "${daemonJson}"
      status=1
    fi
    rm -f "${daemonJsonTemp}"
  fi

  # enable and restart docker service
  if [ ${status} -eq 1 ]; then
    systemctl enable docker.service
    systemctl restart docker.service
  else
    echo "Skipping docker restart since it was already installed."
  fi
  if [[ "$(uname -m)" == "x86_64" ]]; then
    # download docker-compose and place in /usr/local/bin/ if current version is older
    if [ -f "${dockerCompose}" ]; then
      curVers="$(${dockerCompose} --version | cut -d',' -f1 | awk '{ print $3 }')"
      if [ ! "${curVers}" = "${dockerComposeVersion}" ]; then
        download=1
      fi
    else
      download=1
    fi
    if [ ${download} -eq 1 ]; then
      echo "Installing local docker-compose ${dockerComposeVersion}..."
      curl -L "${dockerComposeUrl}" -o "${dockerCompose}"
      chmod +x "${dockerCompose}"
    fi
  fi
}

installPortainer()
{
  if [ ! -f "${dockerBin}" ]; then
    installDocker
  fi

  # remove existing
  removePortainer

  # create portainer data volume
  if ! docker volume ls | grep --quiet "${portainerVolume}"; then
    docker volume create "${portainerVolume}"
  fi

  # pull and start portainer
  docker run -d --name "${portainerName}" -p 9000:9000 -p 8000:8000 --restart=unless-stopped -v /var/run/docker.sock:/var/run/docker.sock -v ${portainerVolume}:/data portainer/portainer
}


option="${1}"
state="${2}"

echo "option :: ${option}"
echo "state  :: ${state}"


case ${option} in
  cockpit)
    if [[ "${state}" == "remove" ]]; then
      removeCockpit
    else
      installCockpit
    fi
    ;;
  portainer)
    if [[ "${state}" == "remove" ]]; then
      removePortainer
    else
      installPortainer
    fi
    ;;
  *)
    if [[ "${state}" == "remove" ]]; then
      removeDocker
    else
      installDocker
    fi
    ;;
esac

exit 0
